import tkinter as tk
import cv2
import numpy as np
import pytesseract
import os
from datetime import datetime

from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
from ultralytics import YOLO


class PlateRecognitionApp:
    def __init__(self, root):
        self.root = root
        pytesseract.pytesseract.tesseract_cmd = r'D:\Tesseract\tesseract.exe'
        self.root.title("Ara√ß Plaka Tanƒ±ma Sistemi")
        self.root.geometry("1600x950")
        
        # Koyu tema renk paleti
        self.colors = {
            'primary_bg': '#0D0D0D',          
            'secondary_bg': '#1A1A1A',        
            'tertiary_bg': '#222222',         
            'text_primary': "#FFFFFF",        
            'text_secondary': "#FFFFFF",     
            'accent_button': '#F59E0B',       
            'button_hover': '#FBBF24',     
            'success': '#22C55E',             
            'success_hover': '#4ADE80',      
            'warning': '#DC2626',             
            'warning_hover': '#EF4444',      
            'input_bg': '#141414',            
            'placeholder': '#6B7280',         
            'border': '#2E2E2E',             
            'active_highlight': '#FACC15'     
        }
        
        # Ana pencere stili
        self.root.configure(bg=self.colors['primary_bg'])
        
        # Model 
        self.model = None

        # Deƒüi≈ükenler
        self.original_image = None
        self.cropped_plate = None
        
        # √úcretlendirme tablosu
        self.billing_data = []
        
        # √úcret tarifeleri
        self.pricing = {
            "0-1 saat": 130,
            "1-2 saat": 180,
            "2-3 saat": 230,
            "3-4 saat": 280,
            "4-5 saat": 330,
            "5-6 saat": 380,
            "Aylƒ±k": 6910
        }
        
        self.setup_styles()
        self.setup_ui()
        
    def setup_styles(self):
        """TTK stillerini yapƒ±landƒ±r"""
        style = ttk.Style()
        
        # Ana stil temasƒ±
        style.theme_use('clam')
        
        # LabelFrame stilleri
        style.configure('Custom.TLabelframe', 
                       background=self.colors['secondary_bg'],
                       borderwidth=2,
                       relief='groove',
                       bordercolor=self.colors['border'])
        style.configure('Custom.TLabelframe.Label', 
                       background=self.colors['secondary_bg'],
                       foreground=self.colors['text_primary'],
                       font=('Segoe UI', 12, 'bold'))
        
        # Primary Button stilleri (Amber Orange)
        style.configure('Primary.TButton',
                       background=self.colors['accent_button'],
                       foreground=self.colors['primary_bg'],
                       borderwidth=0,
                       focuscolor='none',
                       font=('Segoe UI', 11, 'bold'),
                       padding=(18, 10))
        
        style.map('Primary.TButton',
                 background=[('active', self.colors['button_hover'])])
        
        # Secondary Button stilleri (Koyu gri)
        style.configure('Secondary.TButton',
                       background=self.colors['tertiary_bg'],
                       foreground=self.colors['text_primary'],
                       borderwidth=1,
                       bordercolor=self.colors['border'],
                       focuscolor='none',
                       font=('Segoe UI', 10),
                       padding=(15, 8))
        
        style.map('Secondary.TButton',
                 background=[('active', self.colors['border'])])
        
        # Success Button stilleri (Ye≈üil)
        style.configure('Success.TButton',
                       background=self.colors['success'],
                       foreground=self.colors['primary_bg'],
                       borderwidth=0,
                       focuscolor='none',
                       font=('Segoe UI', 10, 'bold'),
                       padding=(12, 8))
        
        style.map('Success.TButton',
                 background=[('active', self.colors['success_hover'])])
        
        # Entry stilleri
        style.configure('Custom.TEntry',
                       fieldbackground=self.colors['input_bg'],
                       borderwidth=2,
                       relief='solid',
                       bordercolor=self.colors['border'],
                       foreground=self.colors['text_primary'],
                       insertcolor=self.colors['text_primary'],
                       font=('Segoe UI', 11))
        
        style.map('Custom.TEntry',
                 bordercolor=[('focus', self.colors['active_highlight'])])
        
        # Label stilleri
        style.configure('Title.TLabel',
                       background=self.colors['secondary_bg'],
                       foreground=self.colors['text_primary'],
                       font=('Segoe UI', 14, 'bold'))
        
        style.configure('Subtitle.TLabel',
                       background=self.colors['secondary_bg'],
                       foreground=self.colors['text_secondary'],
                       font=('Segoe UI', 11))
        
        style.configure('Status.TLabel',
                       background=self.colors['secondary_bg'],
                       font=('Segoe UI', 10))
        
        # Combobox stilleri
        style.configure('Custom.TCombobox',
                       fieldbackground=self.colors['input_bg'],
                       borderwidth=2,
                       relief='solid',
                       bordercolor=self.colors['border'],
                       foreground=self.colors['text_primary'],
                       font=('Segoe UI', 11))
        
        # Treeview stilleri
        style.configure('Custom.Treeview',
                       background=self.colors['input_bg'],
                       foreground=self.colors['text_primary'],
                       fieldbackground=self.colors['input_bg'],
                       borderwidth=1,
                       relief='solid')
        
        style.configure('Custom.Treeview.Heading',
                       background=self.colors['tertiary_bg'],
                       foreground=self.colors['text_primary'],
                       font=('Segoe UI', 10, 'bold'))
        
    def setup_ui(self):
        # Ba≈ülƒ±k
        header_frame = tk.Frame(self.root, bg=self.colors['tertiary_bg'], height=90)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, 
                              text="üöó ARA√á PLAKA TANIMA Sƒ∞STEMƒ∞",
                              bg=self.colors['tertiary_bg'],
                              fg=self.colors['text_primary'],
                              font=('Segoe UI', 20, 'bold'))
        title_label.pack(expand=True)
        
        # Ana container
        main_container = tk.Frame(self.root, bg=self.colors['primary_bg'])
        main_container.pack(fill=tk.BOTH, expand=True, padx=25, pady=(0, 25))
        
        # Sol panel - Kontroller
        left_panel = tk.Frame(main_container, bg=self.colors['primary_bg'], width=380)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 15))
        left_panel.pack_propagate(False)
        
        # Orta panel - G√∂r√ºnt√ºler
        middle_panel = tk.Frame(main_container, bg=self.colors['primary_bg'], width=600)
        middle_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 15))
        
        # Saƒü panel - √úcretlendirme
        right_panel = tk.Frame(main_container, bg=self.colors['primary_bg'], width=430)
        right_panel.pack(side=tk.LEFT, fill=tk.Y)
        right_panel.pack_propagate(False)
        
        self.setup_left_panel(left_panel)
        self.setup_middle_panel(middle_panel)
        self.setup_right_panel(right_panel)
        
    def setup_left_panel(self, parent):
        # Model ayarlarƒ±
        model_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è Model Ayarlarƒ±", 
                                   style='Custom.TLabelframe', padding=20)
        model_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(model_frame, text="Model Dosyasƒ±:", 
                 style='Subtitle.TLabel').pack(anchor=tk.W, pady=(0, 8))
        
        path_frame = tk.Frame(model_frame, bg=self.colors['secondary_bg'])
        path_frame.pack(fill=tk.X, pady=(0, 12))
        
        self.model_path_var = tk.StringVar()
        path_entry = ttk.Entry(path_frame, textvariable=self.model_path_var, 
                              style='Custom.TEntry', width=20)
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(path_frame, text="üìÅ Se√ß", command=self.load_model,
                  style='Secondary.TButton').pack(side=tk.RIGHT, padx=(8, 0))
        
        self.model_status_label = ttk.Label(model_frame, text="‚ùå Model y√ºklenmedi", 
                                           style='Status.TLabel', 
                                           foreground=self.colors['warning'])
        self.model_status_label.pack(anchor=tk.W)
        
        # ƒ∞≈ülem butonlarƒ±
        process_frame = ttk.LabelFrame(parent, text="üîß ƒ∞≈ülemler", 
                                     style='Custom.TLabelframe', padding=20)
        process_frame.pack(fill=tk.X, pady=(0, 20))
        
        buttons = [
            ("üì∑ Fotoƒüraf Se√ß", self.select_image, 'Primary.TButton'),
            ("üîç Plaka Tespit Et", self.detect_plate, 'Primary.TButton'),
            ("üìù OCR √áalƒ±≈ütƒ±r", self.run_ocr, 'Primary.TButton'),
            ("üóëÔ∏è Temizle", self.clear_all, 'Secondary.TButton')
        ]
        
        for text, command, style in buttons:
            btn = ttk.Button(process_frame, text=text, command=command, style=style)
            btn.pack(fill=tk.X, pady=3)
        
        # Sonu√ß alanƒ±
        result_frame = ttk.LabelFrame(parent, text="üìã Sonu√ß", 
                                    style='Custom.TLabelframe', padding=20)
        result_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(result_frame, text="Tespit Edilen Plaka:", 
                 style='Subtitle.TLabel').pack(anchor=tk.W, pady=(0, 8))
        
        result_container = tk.Frame(result_frame, bg=self.colors['secondary_bg'])
        result_container.pack(fill=tk.X, pady=(0, 12))
        
        self.result_var = tk.StringVar()
        result_entry = ttk.Entry(result_container, textvariable=self.result_var, 
                               style='Custom.TEntry', font=('Consolas', 14, 'bold'))
        result_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(result_container, text="üìã", command=self.copy_result,
                  style='Success.TButton').pack(side=tk.RIGHT, padx=(8, 0))
        
        # G√ºven skorlarƒ±
        self.confidence_label = tk.Label(result_frame, text="", 
                                       bg=self.colors['secondary_bg'],
                                       fg=self.colors['text_secondary'],
                                       font=('Segoe UI', 10),
                                       wraplength=320,
                                       justify=tk.LEFT)
        self.confidence_label.pack(anchor=tk.W, pady=(8, 0))
        
    def setup_middle_panel(self, parent):
        # G√∂r√ºnt√º ba≈ülƒ±ƒüƒ±
        image_title = tk.Label(parent, text="üñºÔ∏è G√∂r√ºnt√º Analizi", 
                              bg=self.colors['primary_bg'],
                              fg=self.colors['text_primary'],
                              font=('Segoe UI', 16, 'bold'))
        image_title.pack(pady=(0, 20))
        
        # G√∂r√ºnt√º container
        image_container = tk.Frame(parent, bg=self.colors['primary_bg'])
        image_container.pack(fill=tk.BOTH, expand=True)
        
        # Orijinal g√∂r√ºnt√º
        original_frame = self.create_image_frame(image_container, "üì∏ Orijinal G√∂r√ºnt√º")
        original_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 12))
        
        self.original_canvas = tk.Canvas(original_frame, bg=self.colors['input_bg'],
                                       highlightbackground=self.colors['border'],
                                       highlightthickness=2)
        self.original_canvas.pack(fill=tk.BOTH, expand=True, padx=12, pady=12)
        
        # Kƒ±rpƒ±lmƒ±≈ü g√∂r√ºnt√º
        cropped_frame = self.create_image_frame(image_container, "‚úÇÔ∏è Tespit Edilen Plaka")
        cropped_frame.pack(fill=tk.BOTH, expand=True)
        
        self.cropped_canvas = tk.Canvas(cropped_frame, bg=self.colors['input_bg'],
                                      highlightbackground=self.colors['border'],
                                      highlightthickness=2)
        self.cropped_canvas.pack(fill=tk.BOTH, expand=True, padx=12, pady=12)
        
    def setup_right_panel(self, parent):
        # √úcretlendirme alanƒ±
        billing_frame = ttk.LabelFrame(parent, text="üí∞ √úcretlendirme", 
                                     style='Custom.TLabelframe', padding=20)
        billing_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(billing_frame, text="S√ºre Se√ßimi:", 
                 style='Subtitle.TLabel').pack(anchor=tk.W, pady=(0, 8))
        
        self.duration_var = tk.StringVar()
        duration_combo = ttk.Combobox(billing_frame, textvariable=self.duration_var,
                                    values=list(self.pricing.keys()),
                                    style='Custom.TCombobox', state='readonly')
        duration_combo.pack(fill=tk.X, pady=(0, 12))
        duration_combo.bind('<<ComboboxSelected>>', self.calculate_price)
        
        # √úcret g√∂sterimi
        price_frame = tk.Frame(billing_frame, bg=self.colors['secondary_bg'])
        price_frame.pack(fill=tk.X, pady=(0, 12))
        
        tk.Label(price_frame, text="√úcret:", bg=self.colors['secondary_bg'],
                fg=self.colors['text_secondary'], font=('Segoe UI', 11)).pack(anchor=tk.W)
        
        self.price_label = tk.Label(price_frame, text="0 TL", 
                                   bg=self.colors['secondary_bg'],
                                   fg=self.colors['accent_button'],
                                   font=('Segoe UI', 16, 'bold'))
        self.price_label.pack(anchor=tk.W)
        
        # Tabloya ekle butonu
        ttk.Button(billing_frame, text="üí≥ Tabloya Ekle", 
                  command=self.add_to_billing_table,
                  style='Success.TButton').pack(fill=tk.X, pady=(8, 0))
        
        # √úcretlendirme tablosu
        table_frame = ttk.LabelFrame(parent, text="üìä √úcretlendirme Tablosu", 
                                   style='Custom.TLabelframe', padding=15)
        table_frame.pack(fill=tk.BOTH, expand=True)
        
        # Treeview i√ßin scrollbar
        tree_container = tk.Frame(table_frame, bg=self.colors['secondary_bg'])
        tree_container.pack(fill=tk.BOTH, expand=True)
        
        # Treeview
        columns = ('Sƒ±ra', 'Plaka', 'S√ºre', '√úcret', 'Tarih')
        self.billing_tree = ttk.Treeview(tree_container, columns=columns, show='headings',
                                       style='Custom.Treeview', height=12)
        
        # S√ºtun ba≈ülƒ±klarƒ±
        self.billing_tree.heading('Sƒ±ra', text='#')
        self.billing_tree.heading('Plaka', text='Plaka')
        self.billing_tree.heading('S√ºre', text='S√ºre')
        self.billing_tree.heading('√úcret', text='√úcret')
        self.billing_tree.heading('Tarih', text='Tarih')
        
        # S√ºtun geni≈ülikleri
        self.billing_tree.column('Sƒ±ra', width=40, anchor=tk.CENTER)
        self.billing_tree.column('Plaka', width=80, anchor=tk.CENTER)
        self.billing_tree.column('S√ºre', width=80, anchor=tk.CENTER)
        self.billing_tree.column('√úcret', width=70, anchor=tk.CENTER)
        self.billing_tree.column('Tarih', width=90, anchor=tk.CENTER)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_container, orient=tk.VERTICAL, command=self.billing_tree.yview)
        self.billing_tree.configure(yscrollcommand=scrollbar.set)
        
        self.billing_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Toplam √ºcret
        total_frame = tk.Frame(table_frame, bg=self.colors['secondary_bg'], height=40)
        total_frame.pack(fill=tk.X, pady=(10, 0))
        total_frame.pack_propagate(False)
        
        self.total_label = tk.Label(total_frame, text="Toplam: 0 TL", 
                                   bg=self.colors['secondary_bg'],
                                   fg=self.colors['accent_button'],
                                   font=('Segoe UI', 14, 'bold'))
        self.total_label.pack(expand=True)
        
    def create_image_frame(self, parent, title):
        """G√∂r√ºnt√º frame'i olu≈ütur"""
        frame = tk.Frame(parent, bg=self.colors['secondary_bg'], relief='groove', bd=2)
        
        title_label = tk.Label(frame, text=title,
                              bg=self.colors['tertiary_bg'],
                              fg=self.colors['text_primary'],
                              font=('Segoe UI', 13, 'bold'),
                              pady=12)
        title_label.pack(fill=tk.X)
        
        return frame
    
    def load_model(self):
        """YOLO modelini y√ºkle"""
        file_path = filedialog.askopenfilename(
            title="YOLO Model Dosyasƒ±nƒ± Se√ßin",
            filetypes=[("YOLO models", "*.pt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.model = YOLO(file_path)
                self.model_path_var.set(os.path.basename(file_path))
                self.model_status_label.config(text="‚úÖ Model ba≈üarƒ±yla y√ºklendi", 
                                             foreground=self.colors['success'])
            except Exception as e:
                messagebox.showerror("Hata", f"Model y√ºklenirken hata olu≈ütu:\n{str(e)}")
                self.model_status_label.config(text="‚ùå Model y√ºklenemedi", 
                                             foreground=self.colors['warning'])
    
    def select_image(self):
        """G√∂r√ºnt√º dosyasƒ±nƒ± se√ß"""
        file_path = filedialog.askopenfilename(
            title="G√∂r√ºnt√º Dosyasƒ±nƒ± Se√ßin",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.original_image = cv2.imread(file_path)
                self.original_image = cv2.cvtColor(self.original_image, cv2.COLOR_BGR2RGB)
                
                self.show_image_on_canvas(self.original_image, self.original_canvas)
                
                # Sonu√ßlarƒ± temizle
                self.cropped_plate = None
                self.result_var.set("")
                self.confidence_label.config(text="")
                self.cropped_canvas.delete("all")
                
                # Canvas'a placeholder text ekle
                self.add_placeholder_text(self.cropped_canvas, "Plaka tespiti i√ßin\n'Plaka Tespit Et' butonuna tƒ±klayƒ±n")
                
            except Exception as e:
                messagebox.showerror("Hata", f"G√∂r√ºnt√º y√ºklenirken hata olu≈ütu:\n{str(e)}")
    
    def detect_plate(self):
        """Plaka tespiti yap"""
        if self.model is None:
            messagebox.showwarning("Uyarƒ±", "√ñnce bir model y√ºklemelisiniz!")
            return
        
        if self.original_image is None:
            messagebox.showwarning("Uyarƒ±", "√ñnce bir g√∂r√ºnt√º se√ßmelisiniz!")
            return
        
        try:
            results = self.model(self.original_image, conf=0.5)
            
            if len(results[0].boxes) > 0:
                boxes = results[0].boxes
                confidences = boxes.conf.cpu().numpy()
                best_idx = np.argmax(confidences)
                
                box = boxes.xyxy[best_idx].cpu().numpy().astype(int)
                x1, y1, x2, y2 = box
                confidence = confidences[best_idx]
                
                self.cropped_plate = self.original_image[y1:y2, x1:x2]
                
                self.show_image_on_canvas(self.cropped_plate, self.cropped_canvas)
                
                self.confidence_label.config(text=f"üéØ Tespit G√ºven Skoru: {confidence:.3f}")
                
                # Orijinal g√∂r√ºnt√º √ºzerine kutu √ßiz
                img_with_box = self.original_image.copy()
                cv2.rectangle(img_with_box, (x1, y1), (x2, y2), (245, 204, 21), 4)  # Sarƒ± kutu
                self.show_image_on_canvas(img_with_box, self.original_canvas)
                
            else:
                messagebox.showinfo("Bilgi", "G√∂r√ºnt√ºde plaka tespit edilemedi!")
                
        except Exception as e:
            messagebox.showerror("Hata", f"Plaka tespiti sƒ±rasƒ±nda hata olu≈ütu:\n{str(e)}")
    
    def run_ocr(self):
        """Tesseract OCR ile karakter tanƒ±ma"""
        if self.cropped_plate is None:
            messagebox.showwarning("Uyarƒ±", "√ñnce plaka tespiti yapmalƒ±sƒ±nƒ±z!")
            return

        try:
           # Griye √ßevir
            gray = cv2.cvtColor(self.cropped_plate, cv2.COLOR_BGR2GRAY)

            # G√ºr√ºlt√º azaltma (Median Blur)
            denoised = cv2.medianBlur(gray, 3)  # Kernel boyutu 3 veya 5 olabilir, test edebilirsin

            # E≈üikleme (Otsu ile)
            _, thresh = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

            # OCR
            custom_config = r'--oem 3 --psm 7 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
            text = pytesseract.image_to_string(denoised, config=custom_config, lang='eng')

            # Sonu√ßlarƒ± i≈üle
            text = text.strip().upper().replace(' ', '').replace('\n', '')
        
            if len(text) > 2:
                self.result_var.set(text)
                self.confidence_label.config(text="üìù Tesseract OCR ile ba≈üarƒ±yla tanƒ±ndƒ±.")
            else:
                messagebox.showinfo("Bilgi", "Plaka √ºzerinde okunabilir metin bulunamadƒ±!")
        
        except Exception as e:
            messagebox.showerror("Hata", f"OCR i≈ülemi sƒ±rasƒ±nda hata olu≈ütu:\n{str(e)}")
    
    def calculate_price(self, event=None):
        """Se√ßilen s√ºreye g√∂re √ºcreti hesapla"""
        duration = self.duration_var.get()
        if duration in self.pricing:
            price = self.pricing[duration]
            self.price_label.config(text=f"{price} TL")
        else:
            self.price_label.config(text="0 TL")
    
    def add_to_billing_table(self):
        """Plaka ve √ºcret bilgisini tabloya ekle"""
        plate = self.result_var.get()
        duration = self.duration_var.get()
        
        if not plate:
            messagebox.showwarning("Uyarƒ±", "√ñnce plaka tespiti yapmalƒ±sƒ±nƒ±z!")
            return
        
        if not duration:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen s√ºre se√ßimi yapƒ±n!")
            return
        
        price = self.pricing[duration]
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # Tabloya ekle
        row_number = len(self.billing_data) + 1
        self.billing_data.append({
            'sira': row_number,
            'plaka': plate,
            'sure': duration,
            'ucret': price,
            'tarih': current_time
        })
        
        # Treeview'e ekle
        self.billing_tree.insert('', 'end', values=(
            row_number, plate, duration, f"{price} TL", current_time
        ))
        
        # Toplam √ºcreti g√ºncelle
        total = sum(item['ucret'] for item in self.billing_data)
        self.total_label.config(text=f"Toplam: {total} TL")
        
        messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", f"Plaka {plate} tabloya eklendi!")
        
        # Formu temizle
        self.duration_var.set("")
        self.price_label.config(text="0 TL")
    
    def show_image_on_canvas(self, image, canvas):
        """G√∂r√ºnt√ºy√º canvas √ºzerine g√∂ster"""
        canvas.update()
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()
        
        if canvas_width <= 1 or canvas_height <= 1:
            canvas.after(100, lambda: self.show_image_on_canvas(image, canvas))
            return
        
        h, w = image.shape[:2]
        aspect_ratio = w / h
        
        if canvas_width / canvas_height > aspect_ratio:
            new_height = canvas_height - 25
            new_width = int(new_height * aspect_ratio)
        else:
            new_width = canvas_width - 25
            new_height = int(new_width / aspect_ratio)
        
        resized_image = cv2.resize(image, (new_width, new_height))
        pil_image = Image.fromarray(resized_image)
        photo = ImageTk.PhotoImage(pil_image)
        
        canvas.delete("all")
        canvas.create_image(canvas_width//2, canvas_height//2, image=photo, anchor=tk.CENTER)
        canvas.image = photo
    
    def add_placeholder_text(self, canvas, text):
        """Canvas'a placeholder text ekle"""
        canvas.delete("all")
        canvas.create_text(canvas.winfo_width()//2, canvas.winfo_height()//2,
                          text=text, fill=self.colors['placeholder'],
                          font=('Segoe UI', 13), anchor=tk.CENTER)
    
    def copy_result(self):
        """Sonucu panoya kopyala"""
        result = self.result_var.get()
        if result:
            self.root.clipboard_clear()
            self.root.clipboard_append(result)
            messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", "Plaka metni panoya kopyalandƒ±!")
        else:
            messagebox.showwarning("Uyarƒ±", "Kopyalanacak metin yok!")
    
    def clear_all(self):
        """T√ºm sonu√ßlarƒ± temizle"""
        self.original_image = None
        self.cropped_plate = None
        self.result_var.set("")
        self.confidence_label.config(text="")
        self.original_canvas.delete("all")
        self.cropped_canvas.delete("all")
        
        # Placeholder textleri ekle
        self.add_placeholder_text(self.original_canvas, "G√∂r√ºnt√º se√ßmek i√ßin\n'Fotoƒüraf Se√ß' butonuna tƒ±klayƒ±n")
        self.add_placeholder_text(self.cropped_canvas, "Plaka tespiti i√ßin\n'Plaka Tespit Et' butonuna tƒ±klayƒ±n")

def main():
    root = tk.Tk()
    app = PlateRecognitionApp(root)
    root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = PlateRecognitionApp(root)
    root.mainloop()